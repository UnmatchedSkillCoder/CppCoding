/*
//Base & it's power
#include<iostream>
#include<cmath>
using namespace std;

double Power(int Base, double Exponent=2){
    return pow(Base,Exponent);
}

int main()
{
    double Base;
    int Exponent;

    cout<<"Enter the base : ";
    cin>>Base;

    cout<<"Enter the power : ";
    cin>>Exponent;

    double Result = Power(Base,Exponent);

    cout<<"The calculated power of is : "<<Result;
    return 0;
}
*/

/*
//Sum of coordinates
#include<iostream>
using namespace std;

// Define a structure called 'point' to model a point
struct Point{
    int x;
    int y;
};

int main(){
    // Declare three points
    Point P1,P2,sumPoint;

    cout<<"Enter coordinates for P1 : ";
    cin>>P1.x>>P1.y;

    cout<<"Enter coordinates for P2 : ";
    cin>>P2.x>>P2.y;

    sumPoint.x=P1.x+P2.x;
    sumPoint.y=P1.y+P2.y;

    cout<<"Co-ordinates of P1+P2 are : "<<sumPoint.x<<","<<sumPoint.y;

    return 0;
}
*/

/*
//Calculator using operator(+, -, *, /)
#include<iostream>
using namespace std;

int main(){
    char doAnother;
    do{
        double N1,N2,Result;
        char Op;

        cout<<"Enter first number, operator, and second number :  "; 
        cin>>N1>>Op>>N2;

        switch(Op){
            case '+':
            Result=N1+N2;
            break;

            case '-':
            Result=N1-N2;
            break;

            case '*':
            Result=N1*N2;
            break;
            
            case '/':
                if (N2!=0){
                    Result=N1/N2;
                }else{
                    cerr<< "Error! Division by zero is not allowed."<< endl;
                    return 1; // Exit with an error code
                }
                break;

            //Operator doesn't match any case constant
            default:
                cerr<<"Error! Invalid operator"<<endl;
                return 1; // Exit with an error code
            }

            cout<<"Answer"<<Result<<endl;

            cout<<"Enter your choice (Y/N)?";
            cin>>doAnother;
    }while(doAnother=='Y'||doAnother=='y');

    return 0;
}
*/

/*
//Phone number
#include<iostream>
using namespace std;

struct Phone{
    int areaCode;
    int exchange;
    int number;
};

int main(){
    // Initialize one phone number
    Phone myNumber={212,767,8900};

    // Input another phone number from the user
    Phone yourNumber;

    cout<<"Enter your area code, exchange, and number: ";
    cin>>yourNumber.areaCode>>yourNumber.exchange>>yourNumber.number;

    cout<<"My number is ("<<myNumber.areaCode<<") "<<myNumber.exchange<<"-"<<myNumber.number<<endl;
    cout<<"Your number is ("<<yourNumber.areaCode<<") "<<yourNumber.exchange<<"-"<<yourNumber.number<<endl;

    return 0;
}
*/

/*
//Value of distances
#include <iostream>
using namespace std;

class DB; // Forward declaration for the friend function

class DM{
private:
    int meters;
    int centimeters;

public:
    DM() : meters(0), centimeters(0) {}

    // Function to input values for DM object
    void input(){
        cout<<"Enter distance in meters and centimeters: ";
        cin>>meters>>centimeters;
    }

    // Friend function to add DM and DB objects
    friend DM addDistances(const DM& dm, const DB& db);

    // Function to display distance in meters and centimeters
    void display() const{
        cout<<"Distance: "<<meters<<" meters and "<<centimeters<<" centimeters"<<endl;
    }
};

class DB{
private:
    int feet;
    int inches;

public:
    DB() : feet(0), inches(0) {}

    // Function to input values for DB object
    void input(){
        cout<<"Enter distance in feet and inches: ";
        cin>>feet>>inches;
    }

    // Friend function to add DM and DB objects
    friend DM addDistances(const DM& dm, const DB& db);

    // Function to display distance in feet and inches
    void display() const{
        cout<<"Distance: "<<feet<<" feet and "<<inches<<" inches"<<endl;
    }
};

// Friend function to add DM and DB objects
DM addDistances(const DM& dm, const DB& db){
    DM result;

    // Convert DB to DM
    int totalCentimeters = dm.meters * 100 + dm.centimeters + (db.feet * 30.48 + db.inches * 2.54);
    result.meters = totalCentimeters / 100;
    result.centimeters = totalCentimeters % 100;

    return result;
}

int main() {
    DM dmObject;
    DB dbObject;

    // Input values for DM and DB objects
    dmObject.input();
    dbObject.input();

    // Add DM and DB objects using friend function
    DM result = addDistances(dmObject, dbObject);

    // Display the result
    result.display();

    return 0;
}
*/

/*
//Class rational which represents a numerical value by two double values- NUMERATOR and DENOMINATOR
#include <iostream>

class Rational {
private:
    double numerator;
    double denominator;

public:
    // Constructors
    Rational() : numerator(0.0), denominator(1.0) {}
    Rational(double num, double denom) : numerator(num), denominator(denom) {}

    // Reduce the rational number by eliminating the highest common factor
    void reduce();

    // Overload + operator to add two rational numbers
    Rational operator+(const Rational& other) const;

    // Overload >> operator to enable input through cin
    friend std::istream& operator>>(std::istream& input, Rational& rational);

    // Overload << operator to enable output through cout
    friend std::ostream& operator<<(std::ostream& output, const Rational& rational);
};

// Function to find the greatest common divisor
double gcd(double a, double b) {
    while (b != 0) {
        double temp = b;
        b = fmod(a, b);
        a = temp;
    }
    return a;
}

// Reduce the rational number by eliminating the highest common factor
void Rational::reduce() {
    double commonFactor = gcd(numerator, denominator);
    numerator /= commonFactor;
    denominator /= commonFactor;
}

// Overload + operator to add two rational numbers
Rational Rational::operator+(const Rational& other) const {
    Rational result;
    result.numerator = (numerator * other.denominator) + (other.numerator * denominator);
    result.denominator = denominator * other.denominator;
    result.reduce();
    return result;
}

// Overload >> operator to enable input through cin
std::istream& operator>>(std::istream& input, Rational& rational) {
    std::cout << "Enter numerator: ";
    input >> rational.numerator;
    std::cout << "Enter denominator: ";
    input >> rational.denominator;
    return input;
}

// Overload << operator to enable output through cout
std::ostream& operator<<(std::ostream& output, const Rational& rational) {
    output << rational.numerator << " / " << rational.denominator;
    return output;
}

int main() {
    Rational rational1, rational2, sum;

    // Input two rational numbers
    std::cout << "Enter values for the first rational number:\n";
    std::cin >> rational1;

    std::cout << "Enter values for the second rational number:\n";
    std::cin >> rational2;

    // Add the rational numbers
    sum = rational1 + rational2;

    // Display the result
    std::cout << "Sum of the two rational numbers: " << sum << std::endl;

    return 0;
}
*/

/*
//Derive the two classes son and daughter
#include <iostream>
using namespace std;

class Father {
protected:
    int age;

public:
    Father(int x) : age(x) {}

    virtual void iam() {
        cout << "I AM THE FATHER, my age is: " << age << endl;
    }
};

class Son : public Father {
public:
    Son(int x) : Father(x) {}

    void iam() override {
        cout << "I AM THE SON, my age is: " << age << endl;
    }
};

class Daughter : public Father {
public:
    Daughter(int x) : Father(x) {}

    void iam() override {
        cout << "I AM THE DAUGHTER, my age is: " << age << endl;
    }
};

int main() {
    Father fatherObj(50);
    Son sonObj(25);
    Daughter daughterObj(30);

    fatherObj.iam(); // Calls Father's iam() function
    sonObj.iam();    // Calls Son's iam() function
    daughterObj.iam(); // Calls Daughter's iam() function

    cout << "\nPolymorphism in action:\n";

    // Declare a pointer to father
    Father* ptrFather;

    // Assign addresses of objects of the two derived classes to this pointer
    ptrFather = &sonObj;
    ptrFather->iam(); // Calls Son's iam() function through the pointer

    ptrFather = &daughterObj;
    ptrFather->iam(); // Calls Daughter's iam() function through the pointer

    return 0;
}
*/

/*
//Binary file that reads the data for the students
#include <iostream>
#include <fstream>
#include <string>

struct Student{
    int rollNo;
    std::string name;
    double marks;
};

int main(){
    std::ofstream outFile("students.dat", std::ios::binary | std::ios::out);

    if (!outFile){
        std::cerr << "Error opening file for writing." << std::endl;
        return 1;
    }

    int numStudents;
    std::cout << "Enter the number of students: ";
    std::cin >> numStudents;

    for (int i = 0; i < numStudents; ++i){
        Student student;

        std::cout << "Enter data for student #" << i + 1 << ":\n";
        std::cout << "Roll No.: ";
        std::cin >> student.rollNo;

        std::cout << "Name: ";
        std::cin.ignore(); // Clear the input buffer
        std::getline(std::cin, student.name);

        std::cout << "Marks: ";
        std::cin >> student.marks;

        // Write student data to the binary file
        outFile.write(reinterpret_cast<const char*>(&student), sizeof(Student));

        if (!outFile) {
            std::cerr << "Error writing to file." << std::endl;
            return 1;
        }
    }

    std::cout << "Data written to students.dat successfully." << std::endl;

    outFile.close();

    return 0;
}
*/

/*
//Hospital database for indoor patients
#include <iostream>
#include <vector>
#include <string>

// Structure to store the date
struct Date {
    int year;
    int month;
    int day;
};

// Base class to store patient information
class Patient {
protected:
    std::string name;
    Date admissionDate;
    std::string disease;
    Date dischargeDate;

public:
    // Member function to enter patient information
    void enterInformation() {
        std::cout << "Enter patient name: ";
        std::getline(std::cin, name);

        std::cout << "Enter date of admission (YYYY MM DD): ";
        std::cin >> admissionDate.year >> admissionDate.month >> admissionDate.day;

        std::cin.ignore(); // Clear the newline character from the buffer

        std::cout << "Enter disease: ";
        std::getline(std::cin, disease);

        std::cout << "Enter date of discharge (YYYY MM DD): ";
        std::cin >> dischargeDate.year >> dischargeDate.month >> dischargeDate.day;
    }

    // Member function to display patient information
    void displayInformation() const {
        std::cout << "Name: " << name << std::endl;
        std::cout << "Admission Date: " << admissionDate.year << "-" << admissionDate.month << "-" << admissionDate.day << std::endl;
        std::cout << "Disease: " << disease << std::endl;
        std::cout << "Discharge Date: " << dischargeDate.year << "-" << dischargeDate.month << "-" << dischargeDate.day << std::endl;
    }
};

// Derived class to store the age of patients
class PediatricPatient : public Patient {
private:
    int age;

public:
    // Member function to enter pediatric patient information
    void enterPediatricInformation() {
        enterInformation(); // Call the base class function to enter common information

        std::cout << "Enter patient age: ";
        std::cin >> age;
    }

    // Member function to display pediatric patient information
    void displayPediatricInformation() const {
        displayInformation(); // Call the base class function to display common information
        std::cout << "Age: " << age << " years" << std::endl;
    }
};

int main() {
    std::vector<PediatricPatient> patients;

    int numPatients;
    std::cout << "Enter the number of patients: ";
    std::cin >> numPatients;
    std::cin.ignore(); // Clear the newline character from the buffer

    // Input information for pediatric patients
    for (int i = 0; i < numPatients; ++i) {
        PediatricPatient patient;
        std::cout << "Enter information for Pediatric Patient #" << i + 1 << ":\n";
        patient.enterPediatricInformation();
        patients.push_back(patient);
    }

    // Display information for all pediatric patients
    std::cout << "\nInformation about all Pediatric Patients:\n";
    for (const auto& patient : patients) {
        patient.displayPediatricInformation();
        std::cout << "-------------------------\n";
    }

    return 0;
}
*/

/*
//Class Manager inherit from Employee
#include <iostream>
#include <string>

class Employee {
protected:
    std::string name;
    double salary;

public:
    Employee(const std::string& empName, double empSalary) : name(empName), salary(empSalary) {}

    // Method to display information about the employee
    std::string toString() const {
        return "Name: " + name + "\nSalary: $" + std::to_string(salary);
    }
};

class Manager : public Employee {
private:
    std::string department;

public:
    Manager(const std::string& empName, double empSalary, const std::string& empDepartment)
        : Employee(empName, empSalary), department(empDepartment) {}

    // Method to display information about the manager
    std::string toString() const {
        return Employee::toString() + "\nDepartment: " + department;
    }
};

class Executive : public Manager {
public:
    Executive(const std::string& empName, double empSalary, const std::string& empDepartment)
        : Manager(empName, empSalary, empDepartment) {}

    // Method to display information about the executive
    std::string toString() const {
        return "Executive\n" + Manager::toString();
    }
};

int main() {
    // Test program

    // Create an Employee
    Employee employee("John Doe", 50000.0);
    std::cout << "Employee Information:\n" << employee.toString() << "\n\n";

    // Create a Manager
    Manager manager("Alice Smith", 70000.0, "Human Resources");
    std::cout << "Manager Information:\n" << manager.toString() << "\n\n";

    // Create an Executive
    Executive executive("Bob Johnson", 90000.0, "Finance");
    std::cout << "Executive Information:\n" << executive.toString() << "\n\n";

    return 0;
}
*/

/*
//Toolbooth class
#include <iostream>
#include <conio.h> // For _getch() function

class TollBooth {
private:
    unsigned int totalCars;
    double totalCash;

public:
    // Constructor to initialize totalCars and totalCash to 0
    TollBooth() : totalCars(0), totalCash(0.0) {}

    // Member function to count a paying car
    void payingCar() {
        totalCars++;
        totalCash += 0.50;
    }

    // Member function to count a non-paying car
    void nopayCar() {
        totalCars++;
    }

    // Member function to display the total cars and total cash
    void display() const {
        std::cout << "Total Cars: " << totalCars << "\nTotal Cash: $" << totalCash << std::endl;
    }
};

int main() {
    TollBooth tollBooth;

    char key;
    do {
        std::cout << "Press 'P' to count a paying car, 'N' to count a non-paying car, or 'ESC' to exit: ";
        key = _getch(); // Using _getch() to read a single character without waiting for Enter key

        switch (key) {
            case 'P':
            case 'p':
                tollBooth.payingCar();
                std::cout << "Paying car counted!\n";
                break;

            case 'N':
            case 'n':
                tollBooth.nopayCar();
                std::cout << "Non-paying car counted!\n";
                break;

            case 27: // 27 is the ASCII code for the ESC key
                break;

            default:
                std::cout << "Invalid key. Please try again.\n";
                break;
        }
    } while (key != 27);

    std::cout << "\nToll Booth Summary:\n";
    tollBooth.display();

    return 0;
}
*/

/*
//Reverse it function
#include <iostream>
#include <string>

// Function to reverse a string
void reversit(std::string& str) {
    // Using a for loop to swap characters from the beginning and end
    for (size_t i = 0, j = str.length() - 1; i < j; ++i, --j) {
        std::swap(str[i], str[j]);
    }
}

int main() {
    // Get a string from the user
    std::cout << "Enter a string: ";
    std::string inputString;
    std::getline(std::cin, inputString);

    // Call reversit function to reverse the string
    reversit(inputString);

    // Print the reversed string
    std::cout << "Reversed String: " << inputString << std::endl;

    return 0;
}
*/

/*
//Deque
#include <iostream>
#include <deque>
#include <string>
#include <algorithm>

// Display function for use with forEach
void display(const std::string& str) {
    std::cout << str << std::endl;
}

// Predicate function for use with firstThat
bool matchString(const std::string& str, const std::string& target) {
    return str == target;
}

int main() {
    // Create a deque of strings
    std::deque<std::string> myDeque;

    // Insert strings at the head (front) of the deque
    myDeque.push_front("One");
    myDeque.push_front("Two");
    myDeque.push_front("Three");

    // Insert strings at the tail (back) of the deque
    myDeque.push_back("Four");
    myDeque.push_back("Five");
    myDeque.push_back("Six");

    // Display the contents of the deque using forEach
    std::cout << "Deque Contents (using forEach):" << std::endl;
    std::for_each(myDeque.begin(), myDeque.end(), display);

    // Search for a particular string using firstThat
    std::string searchString = "Four";
    auto it = std::find_if(myDeque.begin(), myDeque.end(), std::bind(matchString, std::placeholders::_1, searchString));

    if (it != myDeque.end()) {
        std::cout << "\nFound string '" << searchString << "' in the deque.\n\n";
    } else {
        std::cout << "\nString '" << searchString << "' not found in the deque.\n\n";
    }

    // Remove all items from the deque using getLeft
    std::cout << "Deque Contents (using getLeft):" << std::endl;
    while (!myDeque.empty()) {
        std::cout << myDeque.front() << std::endl;
        myDeque.pop_front();
    }

    return 0;
}
*/

/*
//Bank
#include <iostream>
#include <iomanip>

class Account {
protected:
    std::string customerName;
    long accountNumber;
    char accountType;
    double balance;

public:
    // Function to initialize account details
    void initializeAccount(const std::string& name, long accNumber, char accType) {
        customerName = name;
        accountNumber = accNumber;
        accountType = accType;
        balance = 0.0;
    }

    // Function to accept deposit from a customer and update the balance
    void deposit(double amount) {
        balance += amount;
        std::cout << "Deposit of $" << amount << " successful. Updated balance: $" << balance << std::endl;
    }

    // Function to display the balance
    void displayBalance() const {
        std::cout << "Account Number: " << accountNumber << "\nCustomer Name: " << customerName
                  << "\nAccount Type: " << accountType << "\nBalance: $" << balance << std::endl;
    }

    // Function to compute and deposit interest (for SavingsAccount)
    virtual void depositInterest() {
        // Default implementation for accounts other than savings account
        std::cout << "Interest not applicable for this account type." << std::endl;
    }

    // Function to permit withdrawal and update the balance
    virtual void withdraw(double amount) {
        // Default implementation for accounts other than current account
        std::cout << "Withdrawal not applicable for this account type." << std::endl;
    }

    // Function to check for the minimum balance, impose penalty if necessary, and update the balance
    virtual void checkMinimumBalance(double minBalance, double penalty) {
        // Default implementation for accounts other than current account
        std::cout << "Minimum balance check not applicable for this account type." << std::endl;
    }
};

class SavingsAccount : public Account {
public:
    // Function to compute and deposit interest
    void depositInterest() override {
        double interestRate = 0.05; // 5% interest rate for savings account
        double interest = balance * interestRate;
        balance += interest;
        std::cout << "Interest of $" << std::fixed << std::setprecision(2) << interest
                  << " credited. Updated balance: $" << balance << std::endl;
    }

    // Function to permit withdrawal and update the balance
    void withdraw(double amount) override {
        if (amount <= balance) {
            balance -= amount;
            std::cout << "Withdrawal of $" << amount << " successful. Updated balance: $" << balance << std::endl;
        } else {
            std::cout << "Insufficient funds for withdrawal." << std::endl;
        }
    }
};

class CurrentAccount : public Account {
public:
    // Function to check for the minimum balance, impose penalty if necessary, and update the balance
    void checkMinimumBalance(double minBalance, double penalty) override {
        if (balance < minBalance) {
            balance -= penalty;
            std::cout << "Minimum balance not maintained. Penalty of $" << penalty
                      << " imposed. Updated balance: $" << balance << std::endl;
        } else {
            std::cout << "Minimum balance maintained. No penalty imposed." << std::endl;
        }
    }

    // Function to permit withdrawal and update the balance
    void withdraw(double amount) override {
        if (amount <= balance) {
            balance -= amount;
            std::cout << "Withdrawal of $" << amount << " successful. Updated balance: $" << balance << std::endl;
        } else {
            std::cout << "Insufficient funds for withdrawal." << std::endl;
        }
    }
};

int main() {
    // Example usage of the classes
    SavingsAccount savingsAccount;
    CurrentAccount currentAccount;

    savingsAccount.initializeAccount("John Doe", 123456, 'S');
    currentAccount.initializeAccount("Jane Smith", 789012, 'C');

    savingsAccount.deposit(1000.0);
    savingsAccount.depositInterest();
    savingsAccount.withdraw(200.0);
    savingsAccount.displayBalance();

    currentAccount.deposit(5000.0);
    currentAccount.withdraw(3000.0);
    currentAccount.checkMinimumBalance(1000.0, 50.0);
    currentAccount.displayBalance();

    return 0;
}
*/

/*
//Area of figures
#include <iostream>

class Shape {
protected:
    double dimension1;
    double dimension2;

public:
    // Member function to initialize base class data members
    void get_data() {
        std::cout << "Enter dimension 1: ";
        std::cin >> dimension1;

        std::cout << "Enter dimension 2: ";
        std::cin >> dimension2;
    }

    // Virtual member function to compute and display the area of figures
    virtual void display_area() const = 0;
};

class Triangle : public Shape {
public:
    // Redefine the display_area function for triangles
    void display_area() const override {
        double area = 0.5 * dimension1 * dimension2;
        std::cout << "Area of Triangle: " << area << std::endl;
    }
};

class Rectangle : public Shape {
public:
    // Redefine the display_area function for rectangles
    void display_area() const override {
        double area = dimension1 * dimension2;
        std::cout << "Area of Rectangle: " << area << std::endl;
    }
};

int main() {
    Shape* shapePtr; // Pointer to base class

    // Create objects dynamically based on user input
    char choice;
    std::cout << "Enter 'T' for Triangle or 'R' for Rectangle: ";
    std::cin >> choice;

    if (choice == 'T' || choice == 't') {
        shapePtr = new Triangle;
    } else if (choice == 'R' || choice == 'r') {
        shapePtr = new Rectangle;
    } else {
        std::cout << "Invalid choice. Exiting program." << std::endl;
        return 1;
    }

    // Call member functions to get data and display area
    shapePtr->get_data();
    shapePtr->display_area();

    // Release dynamically allocated memory
    delete shapePtr;

    return 0;
}
*/
